import { useState } from 'react';
import { Plus, Check, Edit2, Trash2, Calendar, Star } from 'lucide-react';
import { useViewTodoQuery, useAddTodoMutation, useUpdateTodoMutation, useDeleteTodoMutation } from './api/requests/todo.requests';
import "./styles.css"

const Todo = () => {
  // const { data: todos = [], isLoading, isError } = useViewTodoQuery() as { data: { id: number; text: string; completed: boolean }[]; isLoading: boolean; isError: boolean };
  const todos = [
    {text: "uigdf"}

  ]
  console.log("todos: ", todos);
  
  const [ updateTodo ] = useUpdateTodoMutation()
  const [ add ] = useAddTodoMutation()
  const [ del ] = useDeleteTodoMutation()
  const[newTodo, setNewTodo] = useState('');
  const [filter, setFilter] = useState('all');
  const [editingId, setEditingId] = useState(null);
  const [editText, setEditText] = useState('');

  const safeTodos = Array.isArray(todos) ? todos : [];

  const addTodo = async () => {
    if (newTodo.trim()) {
      const todo = {
        text: newTodo,
        completed: false,
      };
      console.log("todo: ", todo);
      
      await add({ ...todo })
      setNewTodo('');
    }
  };

  const toggleTodo = async (id: any) => {
    const todo = todos.find(t => t.id === id);
    if (todo) {
      await updateTodo({
        id: id,
        text: todo.text
      });
    }
  };

  const deleteTodo = async (id:any) => {
    const delId= {id};
    await del ({
      ...delId
    })
  };

  const startEdit = (id:any, text:any) => {
    setEditingId(id);
    setEditText(text);
  };

  const saveEdit = async(id:any) => {
    const updatedText = {
      text: editText,
      id: id
    }
    await updateTodo({
      ...updatedText
    })

  };

  const  filteredTodos = safeTodos.filter(todo => {
    if (filter === 'active') return !todo.completed;
    if (filter === 'completed') return todo.completed;
    return true;
  })

  return (
    <div className="min-h-screen bg-gradient-to-br from-purple-50 via-blue-50 to-indigo-100 p-4">
      <div className="max-w-4xl mx-auto">
        <div className="text-center mb-8">
          <h1 className="text-4xl font-bold bg-gradient-to-r from-purple-600 to-blue-600 bg-clip-text text-transparent mb-2">
            ‚ú® My Todo App
          </h1>
          <p className="text-gray-600">Organize your life with ease.</p>
        </div>

        <div className="bg-white rounded-2xl shadow-lg p-6 mb-6 border border-gray-100">
          <div className="flex gap-3">
            <input
              type="text"
              value={newTodo}
              onChange={(e) => setNewTodo(e.target.value)}
              onKeyPress={(e) => e.key === "Enter" && addTodo()}
              placeholder="What needs to be done?"
              className="flex-1 px-4 py-3 border-2 border-gray-200 rounded-xl focus:border-blue-500 focus:outline-none transition-colors text-gray-700"
            />
            <button
              onClick={addTodo}
              className="px-6 py-3 bg-gradient-to-r from-blue-500 to-purple-600 text-white rounded-xl hover:from-blue-600 hover:to-purple-700 transition-all duration-200 transform hover:scale-105 shadow-lg hover:shadow-xl flex items-center gap-2"
            >
              <Plus size={20} />
              Add
            </button>
          </div>
        </div>

        <div className="flex gap-2 mb-6">
          {["all", "active", "completed"].map((filterType) => (
            <button
              key={filterType}
              onClick={() => setFilter(filterType)}
              className={`px-4 py-2 rounded-lg font-medium transition-all duration-200 ${
                filter === filterType
                  ? "bg-blue-500 text-white shadow-lg"
                  : "bg-white text-gray-600 hover:bg-gray-50"
              }`}
            >
              {filterType.charAt(0).toUpperCase() + filterType.slice(1)}
            </button>
          ))}
        </div>
        <div className="grid grid-cols-1 md:grid-cols-3 gap-4 mb-6">
          <div className="bg-white rounded-xl p-4 shadow-sm border border-gray-100">
            <div className="flex items-center gap-3">
              <div className="w-10 h-10 bg-blue-100 rounded-lg flex items-center justify-center">
                <Calendar className="text-blue-600" size={20} />
              </div>
              <div>
                <p className="text-2xl font-bold text-gray-800">
                  {todos.length}
                </p>
                <p className="text-sm text-gray-600">Total Tasks</p>
              </div>
            </div>
          </div>
          <div className="bg-white rounded-xl p-4 shadow-sm border border-gray-100">
            <div className="flex items-center gap-3">
              <div className="w-10 h-10 bg-green-100 rounded-lg flex items-center justify-center">
                <Check className="text-green-600" size={20} />
              </div>
              <div>
                <p className="text-2xl font-bold text-gray-800">
                  {todos.filter((t) => t.completed).length}
                </p>
                <p className="text-sm text-gray-600">Completed</p>
              </div>
            </div>
          </div>
          <div className="bg-white rounded-xl p-4 shadow-sm border border-gray-100">
            <div className="flex items-center gap-3">
              <div className="w-10 h-10 bg-orange-100 rounded-lg flex items-center justify-center">
                <Star className="text-orange-600" size={20} />
              </div>
              <div>
                <p className="text-2xl font-bold text-gray-800">
                  {todos.filter((t) => !t.completed).length}
                </p>
                <p className="text-sm text-gray-600">Remaining</p>
              </div>
            </div>
          </div>
        </div>

        <div className="space-y-3">
          {filteredTodos.map((todo) => (
            <div
              key={todo.id}
              className={`bg-white rounded-xl p-4 shadow-sm border border-gray-100 transition-all duration-200 hover:shadow-md ${
                todo.completed ? "opacity-75" : ""
              }`}
            >
              <div className="flex items-center gap-4">
                <button
                  onClick={() => toggleTodo(todo.id)}
                  className={`size-6 rounded-full border-2 flex items-center justify-center transition-all duration-200 ${
                    todo.completed
                      ? "bg-green-500 border-green-500 text-white"
                      : "border-gray-300 hover:border-green-400"
                  }`}
                >
                  {todo.completed && <Check size={14} />}
                </button>

                <div className="flex-1">
                  {editingId === todo.id ? (
                    <div className="flex gap-2">
                      <input
                        type="text"
                        value={editText}
                        onChange={(e) => setEditText(e.target.value)}
                        onKeyPress={(e) =>
                          e.key === "Enter" && saveEdit(todo.id)
                        }
                        className="flex-1 px-3 py-1 border border-gray-300 rounded-lg focus:outline-none focus:border-blue-500"
                        autoFocus
                      />
                      <button
                        onClick={() => saveEdit(todo.id)}
                        className="px-3 py-1 bg-green-500 text-white rounded-lg hover:bg-green-600 transition-colors"
                      >
                        Save
                      </button>
                      <button
                        onClick={() => setEditingId(null)}
                        className="px-3 py-1 bg-gray-500 text-white rounded-lg hover:bg-gray-600 transition-colors"
                      >
                        Cancel
                      </button>
                    </div>
                  ) : (
                    <div>
                      <p
                        className={`font-medium ${
                          todo.completed
                            ? "line-through text-gray-500"
                            : "text-gray-800"
                        }`}
                      >
                        {todo.text}
                      </p>
                    </div>
                  )}
                </div>

                {editingId !== todo.id && (
                  <div className="flex gap-2">
                    <button
                      onClick={() => startEdit(todo.id, todo.text)}
                      className="p-2 text-gray-400 hover:text-blue-500 hover:bg-blue-50 rounded-lg transition-all duration-200"
                    >
                      <Edit2 size={16} />
                    </button>
                    <button
                      onClick={() => deleteTodo(todo.id)}
                      className="p-2 text-gray-400 hover:text-red-500 hover:bg-red-50 rounded-lg transition-all duration-200"
                    >
                      <Trash2 size={16} />
                    </button>
                  </div>
                )}
              </div>
            </div>
          ))}
        </div>

        {filteredTodos.length === 0 && (
          <div className="text-center py-12">
            <div className="text-6xl mb-4">üìù</div>
            <p className="text-gray-500 text-lg">
              {filter === "completed"
                ? "No completed tasks yet!"
                : filter === "active"
                ? "No active tasks!"
                : "No tasks yet!"}
            </p>
            <p className="text-gray-400 mt-2">
              {filter === "all"
                ? "Add your first task above"
                : "Try a different filter"}
            </p>
          </div>
        )}
      </div>
    </div>
  );
};

export default Todo;